name: CloudPulse CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: 1.5.0
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python Dependencies
      run: |
        cd src/data-generator
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
    
    - name: Run Python Linting
      run: |
        cd src/data-generator
        flake8 app.py --max-line-length=100 --ignore=E203,W503
        black --check app.py
    
    - name: Test Data Generator
      run: |
        cd src/data-generator
        python app.py --test
    
    - name: Run Python Tests
      if: false  # Skip until tests are added
      run: |
        cd src/data-generator
        pytest --cov=app --cov-report=xml
    
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate
    
    - name: Terraform Security Scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: terraform
        soft_fail: true

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment: development
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="environment=dev" -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    
    - name: Output Infrastructure Details
      run: |
        cd terraform
        echo "## ðŸš€ Development Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint:** $(terraform output -raw api_gateway_url)/ingest" >> $GITHUB_STEP_SUMMARY
        echo "- **Kinesis Stream:** $(terraform output -raw kinesis_stream_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Bucket:** $(terraform output -raw s3_data_lake_bucket)" >> $GITHUB_STEP_SUMMARY
        echo "- **Dashboard:** $(terraform output -raw cloudwatch_dashboard_url)" >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="environment=prod" -var="enable_deletion_protection=true" -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    
    - name: Output Infrastructure Details
      run: |
        cd terraform
        echo "## ðŸŽ‰ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint:** $(terraform output -raw api_gateway_url)/ingest" >> $GITHUB_STEP_SUMMARY
        echo "- **Kinesis Stream:** $(terraform output -raw kinesis_stream_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Bucket:** $(terraform output -raw s3_data_lake_bucket)" >> $GITHUB_STEP_SUMMARY
        echo "- **Dashboard:** $(terraform output -raw cloudwatch_dashboard_url)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    
    steps:
    - name: Deployment Success Notification
      run: |
        echo "CloudPulse deployment completed successfully!"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
